openapi: 3.0.1
info:
  title: Spring API
  description: 단팥 백엔드 API 명세서입니다.
  version: 1.0.0
servers:
  - url: https://www.danpat.store
#  - url: http://localhost:8080
security:
  - JWT_TOKEN: []
paths:
  /api/v1/account/validation/business-number:
    post:
      tags:
        - AccountController
      summary: "사업자 번호 유효 확인"
      description: "사업자 번호 유효 확인"
      operationId: verifyBusinessNumber
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessNumberRequest"
            example:
              {
                businessRegistrationNumber: "1041736263",
                businessName: "김태영닷컴",
                representationName: "김태영",
                businessOpenDate: "20231123"
              }
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "유효한 사업자 등록 정보입니다."
  /api/v1/account/sign-up/employer:
    post:
      tags:
        - AccountController
      summary: "사장 회원가입 요청"
      description: "사장 회원가입 요청"
      operationId: signUpEmployer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpEmployerRequest"
            example:
              loginId: "로그인 ID를 적어주세요"
              password: "비밀번호를 적어주세요"
              email: "회원가입한 적 없는 이메일을 적어주세요"
              businessRegistrationNumber: "1041736263"
              businessName: "김태영닷컴"
              representationName: "김태영"
              businessOpenDate: "20231123"
              location:
                zipcode: "12093"
                address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
                detailAddress: "101호"
                sido: "경기"
                sigugun: "남양주시"
                dong: "별내동"
              nationality: "KOREAN"
              role: "EMPLOYER"
              phoneNumber: "010-1234-1234"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "회원가입이 완료되었습니다"
  /api/v1/account/email/code:
    post:
      tags:
        - AccountController
      summary: "이메일 확인용 코드 전송 요청"
      description: "이메일 확인용 코드 전송 요청"
      operationId: sendEmailCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailRequest"
            example:
              email: "본인 이메일 적어서 테스트해주세요"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "이메일 전송을 완료하였습니다."
  /api/v1/account/email/verification:
    post:
      tags:
        - AccountController
      summary: "이메일 확인"
      description: "이메일 확인"
      operationId: verifyEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailCodeRequest"
            example:
              email: "테스트한 이메일을 적어주세요"
              code: "받은 코드 번호를 적어주세요"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "유효한 이메일입니다."
  /api/v1/account/sign-up/employee:
    post:
      tags:
        - AccountController
      summary: "알바생 회원가입 요청"
      description: "알바생 회원가입 요청"
      operationId: signUpEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpEmployeeRequest"
            example:
              "loginId": "로그인 ID를 적어주세요"
              "password": "비밀번호를 적어주세요"
              "name": "이름을 적어주세요"
              "nickname": "닉네임을 적어주세요"
              "email": "회원가입한 적이 없는 이메일을 적어주세요"
              "nationality": "KOREAN"
              "role": "EMPLOYEE"
              "phoneNumber": "010-1234-1234"
              "emailReceivable": true
              "location":
                zipcode: 12345
                address: "주소"
                detailAddress: "상세주소"
                sido: "경기"
                sigugun: "남양주시"
                dong: "별내동"

        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "회원가입이 완료되었습니다"
  /api/v1/account/my:
    delete:
      tags:
        - AccountController
      summary: "계정 삭제 요청"
      description: "게정 삭제 요청"
      operationId: deleteAccount
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "성공적으로 삭제되었습니다."
  /api/v1/auth/login:
    post:
      tags:
        - AuthController
      operationId: login
      summary: "로그인 요청"
      description: "로그인 요청"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              loginId: "로그인 ID를 입력해주세요"
              password: "비밀번호를 입력해주세요"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
              example:
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                userId: "123"
                userRole: "EMPLOYEE"
  /api/v1/auth/refresh:
    post:
      tags:
        - AuthController
      summary: "refreshToken으로 accessToken 재발급 요청"
      description: "refreshToken으로 accessToken 재발급 요청"
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
            example:
              refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
              example:
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                userId: "123"
                userRole: "EMPLOYEE"
  /api/v1/auth/logout:
    post:
      tags:
        - AuthController
      summary: "로그아웃 요청"
      description: "로그아웃 요청"
      operationId: logout
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
              example:
                accessToken: null
                userId: null
                userRole: null
  /api/v1/possible-board:
    post:
      tags:
        - BoardController
      summary: "알바생이 이력서 공개 설정 변경 요청"
      description: "알바생이 이력서 공개 설정 변경 요청"
      operationId: changeOpenStatus
      parameters:
        - name: open-status
          in: query
          required: true
          schema:
            type: boolean
          example: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "사용자 정보가 성공적으로 업데이트되었습니다."
  /api/v1/possible-board/work-preferences/districts:
    get:
      tags:
        - BoardController
      summary: "알바생이 선호 근무지 받기 요청"
      description: "알바생이 선호 근무지 받기 요청"
      operationId: getPreferredDistricts
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlavoredDistrictResponse"
                example:
                  - sido: "경기"
                    sigugun: "남양주시"
                    dong: "별내동"
                  - sido: "경기"
                    sigugun: "남양주시"
                    dong: "별내면"
    post:
      tags:
        - BoardController
      summary: "알바생이 선호 근무지 추가 요청"
      description: "알바생이 선호 근무지 추가 요청"
      operationId: updatePreferredDistricts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePreferredDistrictsRequest"
            example:
              locations:
                - sido: "경기"
                  sigugun: "남양주시"
                  dong: "별내동"
                - sido: "경기"
                  sigugun: "남양주시"
                  dong: "별내면"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlavoredDistrictResponse"
              example:
                example:
                  - sido: "경기"
                    sigugun: "남양주시"
                    dong: "별내동"
                  - sido: "경기"
                    sigugun: "남양주시"
                    dong: "별내면"
  /api/v1/possible-board/work-preferences/category:
    get:
      tags:
        - BoardController
      summary: "알바생이 선호 카테고리 받기 요청"
      description: "알바생이 선호 카테고리 빋기 요청"
      operationId: getPreferredCategories
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlavoredCategoryResponse"
              example:
                - categoryId: 8
                  categoryName: "IT•인터넷"
                  subCategoryId: 8002
                  subCategoryName: "웹/모바일기획"
                - categoryId: 9
                  categoryName: "교육•강사"
                  subCategoryId: 8002
                  subCategoryName: "입시/보습학원"
    post:
      tags:
        - BoardController
      summary: "알바생이 선호 카테고리 업데이트 요청"
      description: "알바생이 선호 카테고리 업데이트 요청"
      operationId: updatePreferredCategories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePreferredCategoriesRequest"
            example:
              categoryIds:
                - categoryId: 8
                  subCategoryId: 8002
                - categoryId: 9
                  subCategoryId: 9002
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlavoredCategoryResponse"
              example:
                - categoryId: 8
                  categoryName: "IT•인터넷"
                - categoryId: 9
                  categoryName: "교육•강사"
  /api/v1/possible-board/work-hours:
    get:
      tags:
        - BoardController
      summary: "알바생이 근무 가능 시간 받기 요청"
      description: "알바생이 근무 가능 시간 받기 요청"
      operationId: getWorkHours
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkHourResponse"
              example:
                - id: 101
                  title: null
                  startTime: "2024-02-01T09:00:00"
                  endTime: "2024-02-01T18:00:00"
                  status: "AVAILABLE"
                - id: 102
                  title: "김태영닷컴"
                  startTime: "2024-02-02T10:00:00"
                  endTime: "2024-02-02T19:00:00"
                  status: "COMPLETED"
    post:
      tags:
        - BoardController
      summary: "알바생이 근무 가능 시간 추가 요청"
      description: "알바생이 근무 가능 시간 추가 요청"
      operationId: updatePossibleTimes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPossibleTimeRequest"
            example:
              possibleTimes:
                - startTime: "2025-02-10T09:00:00"
                  endTime: "2025-02-10T18:00:00"
                - startTime: "2025-02-13T10:00:00"
                  endTime: "2025-02-13T19:00:00"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
              example:
                possibleTimes:
                  - startTime: "2025-02-10T09:00:00"
                    endTime: "2025-02-10T18:00:00"
                  - startTime: "2025-02-13T10:00:00"
                    endTime: "2025-02-13T19:00:00"
  /api/v1/possible-board/personal-info:
    get:
      tags:
        - BoardController
      summary: "알바생이 개인정보 받기 요청"
      description: "알바생이 개인정보 받기 요청"
      operationId: getPersonalInfo
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PersonalInfoResponse"
              example:
                  name: "김태영"
                  nickname: "김태일"
                  age: 25
                  sex: "남"
                  email: "chulsoo@example.com"
                  phoneNumber: "010-1234-5678"
                  profile: "https://danpat.s3.ap-northeast-2.amazonaws.com/user-uploads/1/profile.png"
                  birthdate: "yyyy.mm.dd"
                  callTime: "hh:mm~hh:mm"
                  starPoint: 4.5
                  workCount: 100
                  location:
                    zipcode: "12345"
                    address: "주소"
                    detailAddress: "상세 주소"
                    sido: "경기"
                    sigugun: "남양주시"
                    dong: "별내면"
    post:
      tags:
        - BoardController
      summary: "알바생이 개인정보 적기 요청"
      description: "알바생이 개인정보 적기 요청"
      operationId: updatePersonalInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePersonalInfoRequest"
            example:
              name: "김태영"
              nickname: "김태일"
              age: 25
              sex: "남"
              email: "chulsoo@example.com"
              phoneNumber: "010-1234-5678"
              birthdate: "yyyy:mm:dd"
              callTime: "09:00 ~ 18:00"
              location:
                  zipcode: "12345"
                  address: "주소"
                  detailAddress: "상세 주소"
                  sido: "경기"
                  sigugun: "남양주시"
                  dong: "별내면"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PersonalInfoResponse"
              example:
                name: "김태영"
                nickname: "김태일"
                age: 25
                sex: "남"
                email: "chulsoo@example.com"
                phoneNumber: "010-1234-5678"
                profile: "https://danpat.s3.ap-northeast-2.amazonaws.com/user-uploads/1/profile.png"
                birthdate: "yyyy.mm.dd"
                callTime: "hh:mm~hh:mm"
                starPoint: 4.5
                workCount: 100
                location:
                  zipcode: "12345"
                  address: "주소"
                  detailAddress: "상세 주소"
                  sido: "경기"
                  sigugun: "남양주시"
                  dong: "별내면"
  /api/v1/possible-board/external-career:
    get:
      tags:
        - BoardController
      summary: "알바생이 외부경력 받기 요청"
      description: "알바생이 외부경력 받기 요청"
      operationId: getExternalCareers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExternalCareerResponse"
              example:
                - externalCareerId: 1
                  category:
                    categoryId: 1
                    categoryName: "외식•음료"
                  workCount: 1
                - externalCareerId: 2
                  category:
                    categoryId: 2
                    categoryName: "유통•판매"
                  workCount: 1
    post:
      tags:
        - BoardController
      summary: "알바생이 외부경력 업데이트 요청"
      description: "알바생이 외부경력 업데이트 요청"
      operationId: updateExternalCareers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateExternalCareerRequest"
            example:
              newExternalCareers:
                - subCategoryId: 1002
                  workCount: 1
                - subCategoryId: 2002
                  workCount: 1
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExternalCareerResponse"
              example:
                - externalCareerId: 1
                  category:
                    categoryId: 1
                    categoryName: "외식•음료"
                  workCount: 1
                - externalCareerId: 2
                  category:
                    categoryId: 2
                    categoryName: "유통•판매"
                  workCount: 1
  /api/v1/possible-board/internal-career:
    get:
      tags:
        - BoardController
      summary: "알바생이 내부 경력 받기 요청"
      description: "알바생이 내부 경력 받기 요청"
      operationId: getInternalCareers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InternalCareerResponse"
              example:
                - contractId: 1
                  businessName: "김태영닷컴"
                  startTime: "2024-02-15 12:00:00"
                  endTime: "2024-02-15 14:00:00"
  /api/v1/possible-board/introduction:
    get:
      tags:
        - BoardController
      summary: "알바생이 자기소개글 받기 요청"
      description: "알바생이 자기소개글 받기 요청"
      operationId: getIntroduction
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
              example:
                introduction: "자기소개"
    post:
      tags:
        - BoardController
      summary: "알바생이 자기소개글 적기 요청"
      description: "알바생이 자기소개글 적기 요청"
      operationId: postIntroduction
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example:
              introduction: "자기소개"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
              example:
                introduction: "자기소개"
  /api/v1/upload/profile:
    post:
      tags:
        - S3Controller
      summary: 프로필 이미지 업로드
      description: "사용자가 프로필 이미지를 업로드합니다."
      operationId: upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "업로드할 프로필 이미지 파일을 선택하세요."
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "https://danpat.s3.ap-northeast-2.amazonaws.com/user-uploads/1/profile.png"

  /api/v1/offeremployment:
    post:
      tags:
        - OfferEmploymentController
      summary: "사장님이 알바생에게 제안 요청하기"
      description: "사장님이 알바생에게 제안 요청하기"
      operationId: sendOfferEmployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferEmploymentRequest"
            example:
              employeeId: 2
              businessId: 1
              suggestHourlyPay: 10000
              suggestStartTime: "2025-01-01T09:00:00"
              suggestEndTime: "2025-01-01T18:00:00"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OfferEmploymentResponse"
              example:
                suggestId: 1
                message: "PENDING"
  /api/v1/offeremployment/complete:
    post:
      tags:
        - OfferEmploymentController
      summary: "알바 종료 요청하기"
      description: "알바 종료 요청하기"
      operationId: completeOfferEmployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferEmploymentCompleteRequest"
            example:
              suggestId: 1
              employeeId: 1001
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example:
                message: "성공적으로 종료되었습니다."
  /api/v1/offeremployment/refuse:
    post:
      tags:
        - OfferEmploymentController
      summary: "알바생이 제안 거절 요청하기"
      description: "알바생이 제안 거절 요청하기"
      operationId: refuseOfferEmployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferEmploymentCompleteRequest"
            example:
              suggestId: 1
              employeeId: 1001
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example:
                message: "성공적으로 거절되었습니다."
  /api/v1/contracts/suggests/chatroom:
    post:
      tags:
        - SuggestController
      summary: "채팅방 생성 요청하기"
      description: "채팅방 생성 요청하기"
      operationId: createChatRoom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcceptSuggestCommand"
            example:
              suggestId: 1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "성공적으로 채팅방을 생성하였습니다."
  /api/v1/contracts/suggests/{suggestId}/accept:
    post:
      tags:
        - SuggestController
      summary: "알바생이 제안 수락"
      description: "알바생이 제안 수락"
      operationId: acceptContractContact
      parameters:
        - name: suggestId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                example: "성공적으로 제안을 수락하였습니다."
  /api/v1/employment-suggests/status/{businessId}:
    get:
      tags:
        - SuggestController
      summary: "사장 마이페이지에서 특정 가게 체결 현황"
      description: "사장 마이페이지에서 특정 가게 체결 현황"
      operationId: getSuggestStatus
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example:
                - status: "COMPLETED"
                  name: "알바생"
                  hourlyPayment: 12000
                  businessName: "김태영닷컴"
                  workTime: "2024.02.20 12:00~14:00"
                  chatRoomId: 1
  /api/v1/employment-suggests/employee/status:
    get:
      tags:
        - SuggestController
      summary: "알바 마이페이지에서 체결 현황"
      description: "알바 마이페이지에서 체결 현황"
      operationId: getEmployeeSuggestStatus
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example:
                - status: "COMPLETED"
                  name: "알바생"
                  hourlyPayment: 12000
                  businessName: "김태영닷컴"
                  workTime: "2024.02.20 12:00~14:00"
                  chatRoomId: 1
  /api/v1/support/announcements/{announcementId}:
    get:
      tags:
        - announcement-controller
      operationId: getAnnouncement
      parameters:
        - name: announcementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouncementResponse"
              example:
                announcementId: 1
                announcementTitle: "긴급 서버 점검 공지"
                announcementType: "공지"
                announcementContent: "서버 점검이 오늘 밤 11시에 진행됩니다."
                viewCount: 123


    put:
      tags:
        - announcement-controller
      operationId: updateAnnouncement
      parameters:
        - name: announcementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnouncementRequest"
            example:
              announcementTitle: "수정된 공지사항 제목"
              announcementType: "업데이트"
              announcementContent: "공지 내용이 업데이트되었습니다."
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnnouncementResponse"
              example:
                announcementId: 1
                announcementTitle: "수정된 공지사항 제목"
                announcementType: "업데이트"
                announcementContent: "공지 내용이 업데이트되었습니다."
                viewCount: 200
    delete:
      tags:
        - announcement-controller
      operationId: deleteAnnouncement
      parameters:
        - name: announcementId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
  /api/v1/contracts/{contractId}:
    put:
      tags:
        - ContractController
      summary: "특정 계약 조건 변경하기"
      description: "특정 계약 조건 변경하기"
      operationId: updateContractCondition
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContractConditionRequest"
            example:
              suggestStartDateTime: "2025-02-01T14:00:00"
              suggestEndDateTime: "2025-02-01T16:00:00"
              suggestHourlyPayment: 10000
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "근무 조건이 변경되었습니다."
  /api/v1/contracts/{contractId}/accepts:
    post:
      tags:
        - ContractController
      summary: "알바생이 특정 계약 수락하기(체결)"
      description: "알바생이 특정 계약 수락하기(체결)"
      operationId: acceptContract
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                example: "성공적으로 수락되었습니다."
  /api/v1/contracts/{contractId}/status:
    get:
      tags:
        - ContractController
      summary: "특정 계약 조건 보기(채팅방 생성 후)"
      description: "특정 계약 조건 보기(채팅방 생성 후)"
      operationId: getContractInfo
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ContractDTO"
              example:
                businessInfo:
                  businessName: "김태영닷컴"
                  representationName: "김태영"
                  startTime: "2024-02-01T09:00:00"
                  endTime: "2024-02-01T18:00:00"
                  location:
                    address: "서울시 강남구 테헤란로 123"
                    zipcode: "06100"
                    detailAddress: "5층 503호"
                  businessPhone: "02-1234-5678"
                  signedDate: "2023-12-01T14:30:00"
                employeeInfo:
                  employeeName: "이영희"
                  employeePhone: "010-9876-5432"
                  starPoint: 4.7
                  workCount: 120
  /api/v1/business:
    get:
      tags:
        - BusinessController
      summary: "내 가게 정보 보기"
      description: "내 가게 정보 보기"
      operationId: getMyBusiness
      parameters:
        - name: businessId
          in: query
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
              example:
                businessName: "김태영닷컴"
                businessId: 1
                owner:
                  accountId: 1
                  name: "김태영"
                location:
                  zipcode: "12093"
                  address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
                  detailAddress: "101호"
                categoryInfos:
                  - subCategoryId: 1002
                    subCategoryName: "일반음식점"
                email: "이메일"
                phoneNumber: "전화번호"
    put:
      tags:
        - BusinessController
      summary: "내 가게 정보 변경사항 전송하기"
      description: "내 가게 정보 변경사항 전송하기"
      operationId: modifyMyBusiness
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyBusinessRequest"
            example:
              businessId: 1
              businessName: "김태영닷컴"
              location:
                zipcode: "12093"
                address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
                detailAddress: "101호"
                sido: "경기"
                sigugun: "남양주시"
                dong: "별내동"
              subCategoryIds:
                - 8002
              representationName: "대표자명"
              phoneNumber: "전화번호"
              email: "이메일"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "요청이 성공적으로 처리되었습니다."
    post:
      tags:
        - BusinessController
      summary: "내 가게 정보 전송하기"
      description: "내 가게 정보 전송하기"
      operationId: addBusiness
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddBusinessRequest"
            example:
              businessName: "김태영닷컴"
              businessRegistrationNumber: "12345"
              businessOpenDate: "250101"
              location:
                zipcode: "12093"
                address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
                detailAddress: "101호"
              subCategoryIds:
                - 8002
              representationName: "김태영"
              email: "이메일"
              phoneNumber: "전화번호"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "요청이 성공적으로 처리되었습니다."
  /api/v1/support/inquiry:
    post:
      tags:
        - inquiry-controller
      operationId: createInquiry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InquiryRequest"
            example:
              inquiryType: "일반"
              subInquiryType: "서비스 문제"
              title: "서비스 관련 문제"
              content: "서비스 기능에 문제가 있습니다."
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/InquiryResponse"
              example:
                inquiry_id: "123"
                message: "문의가 성공적으로 접수되었습니다."

  /api/v1/support/announcements:
    get:
      tags:
        - announcement-controller
      operationId: getAnnouncements
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnnouncementResponse"
                example:
                  - announcementId: 1
                    announcementTitle: "긴급 서버 점검 공지"
                    announcementType: "공지"
                    announcementContent: "서버 점검이 오늘 밤 11시에 진행됩니다."
                    viewCount: 123
                  - announcementId: 2
                    announcementTitle: "새로운 기능 업데이트"
                    announcementType: "업데이트"
                    announcementContent: "신규 기능이 추가되었습니다. 확인해보세요!"
                    viewCount: 89
    post:
      tags:
        - announcement-controller
      operationId: createAnnouncement
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnouncementRequest"
            example:
              announcementTitle: "시스템 점검 안내"
              announcementType: "공지"
              announcementContent: "시스템 점검이 오전 12시부터 오전 4시까지 진행됩니다."
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AnnouncementResponse"
              example:
                announcementId: 1
                announcementTitle: "시스템 점검 안내"
                announcementType: "공지"
                announcementContent: "시스템 점검이 오전 12시부터 오전 4시까지 진행됩니다."
                viewCount: 0
  /api/v1/info/my/reviews/{reviewId}/report:
    post:
      tags:
        - ReviewReportController
      operationId: reportReview
      parameters:
        - name: reviewId
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewReportRequest"
            example:
              reason: "부당하거나 허위 내용이 포함되어 있습니다."
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReviewReportResponse"
              example:
                reportId: 789
                message: "리뷰 신고가 성공적으로 접수되었습니다."
  /api/v1/contracts/review:
    post:
      tags:
        - ContractReviewController
      summary: "리뷰 작성하기"
      description: "리뷰 작성하기"
      operationId: addReview
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddReviewRequest"
            example:
              contractId: 9
              reviewScore: 5
              reviewContent: "일 잘하네요"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "리뷰가 성공적으로 작성되었습니다."
  /api/v1/contracts/review/my:
    get:
      tags:
        - ContractReviewController
      summary: "내가 쓴 리뷰 보기"
      description: "내가 쓴 리뷰 보기"
      operationId: getMyReview
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewResponse"
              example:
                - reviewId: 1
                  contractId: 9
                  reviewContent: "일 잘하네요"
                  reviewScore: 5
  /api/search/search:
    post:
      tags:
        - search-controller
      operationId: searchAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
            example:
              category: "IT"
              startTime: "2025-01-01T09:00:00"
              endTime: "2025-01-01T18:00:00"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResponse"
                example:
                  - name: "John Doe"
                    sex: "Male"
                    age: 30
                    starPoint: 4.5
                    workCount: 50
                  - name: "Jane Smith"
                    sex: "Female"
                    age: 28
                    starPoint: 4.8
                    workCount: 60
  /api/v1/employer/favorites/employees:
    get:
      tags:
        - EmployerController
      summary: "즐겨찾기한 알바생들 보기"
      description: "즐겨찾기한 알바생들 보기"
      operationId: getLikeEmployee
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example:
                - employeeId: 101
                  name: "김태영"
                  nickname: "김태영1"
                  sex: "남"
                  age: 30
                  starPoint: 4.7
                  workCount: 120
                  externalCareerList:
                    - externalCareerId: 1
                      category:
                        - categoryId: 1
                          categoryName: "외식•음료"
                      workCount: 1
                    - externalCareerId: 2
                      category:
                        - categoryId: 2
                          categoryName: "유통•판매"
                      workCount: 1
                  flavoredCategoryList:
                    - categoryId: 1
                      categoryName: "외식•음료"
                      subCategoryId: 1001
                      subCategoryName: "전체"
                    - categoryId: 2
                      categoryName: "유통•판매"
                      subCategoryId: 1001
                      subCategoryName: "전체"
                  flavoredDistrictList:
                    - sido: "경기"
                      sigugun: "남양주시"
                      dong: "별내동"
                    - sido: "경기"
                      sigugun: "남양주시"
                      dong: "별내동"
  /api/v1/employer/favorites/employee/{employeeId}:
    put:
      tags:
        - EmployerController
      summary: "알바생 즐겨찾기 하기"
      description: "고용주가 즐겨찾기에 알바생을 등록합니다."
      operationId: putFavoriteEmployee
      parameters:
        - name: employeeId
          in: path
          required: true
          description: "즐겨찾기할 알바생 ID"
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "성공적으로 즐겨찾기를 완료하였습니다."
    delete:
      tags:
        - EmployerController
      summary: "즐겨찾기한 알바생 삭제"
      description: "고용주가 즐겨찾기에 등록한 알바생을 삭제합니다."
      operationId: deleteFavoriteEmployee
      parameters:
        - name: employeeId
          in: path
          required: true
          description: "삭제할 알바생 ID"
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "성공적으로 즐겨찾기를 삭제하였습니다."
  /chat/summaries/{userId}:
    get:
      tags:
        - ChatController
      summary: "채팅 미리보기 요약들"
      description: "채팅 미리보기 요약들"
      operationId: getChatSummaries
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChatSummaryResponse"
              example:
                chatSummaries:
                  - roomId: 1
                    "lastMessageId": "67ba9a9640cfc70856b32efb",
                    lastMessageContent: "안녕하세요!"
                    lastMessageTime: "2025-02-23 12:48"
                    numberOfUnreadMessages: 2
                  - roomId: 2
                    "lastMessageId": "67ba9a9640cfc70856b32efb",
                    lastMessageContent: "알바 하실래요?"
                    lastMessageTime: "2025-02-23 12:48"
                    numberOfUnreadMessages: 2
  /chat/room/{roomId}/chats:
    get:
      tags:
        - ChatController
      summary: "채팅방 채팅 내용 불러오기"
      description: "채팅방 채팅 내용 불러오기"
      operationId: getMessages
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
        - name: lastChatId
          in: query
          required: false
          schema:
            type: string
          example: "1"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chat"
              example:
                - id: "67ba8e75e6b233324dcde1cd"
                  content: "안녕하세요!"
                  roomId: 1
                  senderId: 1
                  receiverId: 2
                  sendTime: "2025-02-23 11:37"
                  isRead: true
                - id: "67ba8a7a7a9ed367fa9b120b"
                  content: "네, 반갑습니다!"
                  roomId: 1
                  senderId: 2
                  receiverId: 1
                  sendTime: "2025-02-23 11:39"
                  isRead: false
  /api/v1/employer/businesses:
    get:
      tags:
        - EmployerController
      summary: "내 사업체들 보기"
      description: "내 사업체들 보기"
      operationId: getBusinessList
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
              example:
                - businessId : 10
                  businessName: "김태영닷컴"
                  businessLocation:
                    zipcode: "12093"
                    address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
                    detailAddress: "101호"
                    sido: "경기"
                    sigugun: "남양주시"
                    dong: "별내동"
                - businessId : 11
                  businessName: "김태영법조타운"
                  businessLocation:
                    zipcode: "404320"
                    address: "인천광역시 서구 원당동 인천검단택지개발지구 C5-1-1BL"
                    detailAddress: "101호"
                    sido: "인천"
                    sigugun: "서구"
                    dong: "원당동"
  /api/v1/support/my-inquiries:
    get:
      tags:
        - inquiry-controller
      operationId: getMyInquiries
      parameters:
        - name: accountId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InquiryResponse"
                example:
                  - inquiryId: 1
                    inquiryType: "일반"
                    subInquiryType: "서비스 문제"
                    title: "서비스 관련 문제"
                    content: "서비스 기능에 문제가 발생했습니다."
                    inquiryStatus: "대기 중"
                    answerDate: null
                    createdBy: 123
                  - inquiryId: 2
                    inquiryType: "기술"
                    subInquiryType: "버그 신고"
                    title: "애플리케이션 버그 신고"
                    content: "애플리케이션에서 치명적인 버그를 발견했습니다."
                    inquiryStatus: "답변 완료"
                    answerDate: "2025-01-20T10:00:00"
                    createdBy: 123
  /api/v1/support/announcements/search:
    get:
      tags:
        - announcement-controller
      operationId: searchAnnouncements
      parameters:
        - name: keyword
          in: query
          required: true
          schema:
            type: string
            example: "점검"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnnouncementResponse"
                example:
                  - announcementId: 1
                    announcementTitle: "시스템 점검 안내"
                    announcementType: "공지"
                    announcementContent: "시스템이 오전 12시부터 오전 4시까지 점검을 진행합니다."
                    viewCount: 150
  /api/v1/review:
    get:
      tags:
        - review-controller
      operationId: getAllReviews
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewResponse"
                example:
                  - reviewId: 1
                    businessName: "테스트 사업장"
                    businessId: 10
                    contractStartTime: "2025-01-01T09:00:00"
                    contractEndTime: "2025-01-01T18:00:00"
                    reviewStarPoint: 5
                    reviewContent: "훌륭한 작업이었습니다!"
                  - reviewId: 2
                    businessName: "또 다른 사업장"
                    businessId: 20
                    contractStartTime: "2025-01-02T09:00:00"
                    contractEndTime: "2025-01-02T18:00:00"
                    reviewStarPoint: 4
                    reviewContent: "좋은 성과를 보여주었습니다."
  /api/v1/review/{reviewId}:
    get:
      tags:
        - review-controller
      operationId: getReviewsByEmployee
      parameters: [ ]
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewResponse"
                example:
                  - reviewId: 1
                    businessName: "테스트 사업장"
                    businessId: 10
                    contractStartTime: "2025-01-01T09:00:00"
                    contractEndTime: "2025-01-01T18:00:00"
                    reviewStarPoint: 5
                    reviewContent: "훌륭한 작업이었습니다!"
  /api/v1/review/my/reviews:
    get:
      tags:
        - review-controller
      operationId: getMyReviews
      parameters:
        - name: accountId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewResponse"
                example:
                  - reviewId: 1
                    businessName: "테스트 사업장"
                    businessId: 10
                    contractStartTime: "2025-01-01T09:00:00"
                    contractEndTime: "2025-01-01T18:00:00"
                    reviewStarPoint: 5
                    reviewContent: "훌륭한 작업이었습니다!"
                  - reviewId: 2
                    businessName: "스타트업 컴퍼니"
                    businessId: 20
                    contractStartTime: "2025-01-05T10:00:00"
                    contractEndTime: "2025-01-05T19:00:00"
                    reviewStarPoint: 4
                    reviewContent: "업무 진행이 원활했습니다."
  /api/v1/review/available:
    get:
      tags:
        - review-controller
      operationId: getAvailableReviewTargets
      parameters:
        - name: businessId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewAvailableResponse"
                example:
                  - employeeId: 1001
                    employeeName: "김철수"
                  - employeeId: 1002
                    employeeName: "이영희"
  /api/v1/setting/email-consent:
    get:
      tags:
        - SettingController
      operationId: getEmailReceivable
      summary: "이메일 수신 여부 설정값 받기"
      description: "이메일 수신 여부 설정값 받기"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EmailConsentResponse"
                example:
                  emailReceivable: true
    post:
      tags:
        - SettingController
      summary: "이메일 수신 여부 변경 api"
      description: "이메일 수신 여부 변경 api"
      parameters:
        - name: emailReceivable
          in: query
          description: "이메일 수신 동의 여부 (true 또는 false)"
          required: true
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: "이메일 수신 여부 변경"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EmailConsentResponse"
                example:
                  emailReceivable: true

components:
  schemas:
    AnnouncementRequest:
      type: object
      properties:
        announcementTitle:
          type: string
        announcementType:
          type: string
        announcementContent:
          type: string
    AnnouncementResponse:
      type: object
      properties:
        announcementId:
          type: integer
          format: int64
        announcementTitle:
          type: string
        announcementType:
          type: string
        announcementContent:
          type: string
        viewCount:
          type: integer
          format: int32

    UpdateContractConditionRequest:
      type: object
      properties:
        suggestStartDateTime:
          type: string
          format: date-time
        suggestEndDateTime:
          type: string
          format: date-time
        suggestHourlyPayment:
          type: integer
          format: int32
    BusinessLocation:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        zipcode:
          type: string
        address:
          type: string
        detailAddress:
          type: string
    ModifyBusinessRequest:
      required:
      - businessId
      type: object
      properties:
        businessId:
          type: integer
          format: int64
        businessName:
          type: string
        location:
          $ref: "#/components/schemas/BusinessLocation"
        representationName:
          type: string
        categoryId:
          type: array
          items:
            type: integer
            format: int64
    Account:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        accountId:
          type: integer
          format: int64
        loginId:
          type: string
        password:
          type: string
        name:
          type: string
        nickname:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        nationality:
          type: string
          enum:
          - KOREAN
          - FOREIGN
        roles:
          type: array
          items:
            type: string
            enum:
            - EMPLOYEE
            - EMPLOYER
        sex:
          type: string
        age:
          type: integer
          format: int32
        profileImage:
          type: string
        starPoint:
          type: number
          format: float
        workCount:
          type: integer
          format: int32
        openStatus:
          type: boolean
        deleted:
          type: boolean
        emailReceivable:
          type: boolean
        loginUser:
          $ref: "#/components/schemas/LoginUserRequest"
    InquiryRequest:
      required:
      - createdBy
      - inquiryType
      type: object
      properties:
        inquiryType:
          type: string
        subInquiryType:
          type: string
        title:
          type: string
        content:
          type: string
        createdBy:
          $ref: "#/components/schemas/Account"
    LoginUserRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
    InquiryResponse:
      required:
      - createdBy
      - inquiryId
      type: object
      properties:
        inquiryId:
          type: integer
          format: int64
        inquiryType:
          type: string
        subInquiryType:
          type: string
        title:
          type: string
        content:
          type: string
        inquiryStatus:
          type: string
        answerDate:
          type: string
          format: date-time
        createdBy:
          $ref: "#/components/schemas/Account"
    UpdatePreferredDistrictsRequest:
      type: object
      properties:
        districtIds:
          type: array
          items:
            type: integer
            format: int64
    FlavoredDistrictResponse:
      type: object
      properties:
        districtId:
          type: integer
          format: int64
        districtName:
          type: string
    UpdatePreferredCategoriesRequest:
      type: object
      properties:
        categoryIds:
          type: array
          items:
            type: integer
            format: int64
    FlavoredCategoryResponse:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
        categoryName:
          type: string
    AddPossibleTimeRequest:
      type: object
      properties:
        possibleTimes:
          type: array
          items:
            $ref: "#/components/schemas/PossibleTimeForm"
    PossibleTimeForm:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    UpdatePersonalInfoRequest:
      type: object
      properties:
        name:
          type: string
        sex:
          type: string
        age:
          type: integer
          format: int32
        phoneNumber:
          type: string
        email:
          type: string
        nickname:
          type: string
    PersonalInfoResponse:
      type: object
      properties:
        name:
          type: string
        nickname:
          type: string
        age:
          type: integer
          format: int32
        sex:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        starPoint:
          type: number
          format: float
        workCount:
          type: integer
          format: int32
    ExternalCareerRequest:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
        workCount:
          type: integer
          format: int32
    UpdateExternalCareerRequest:
      type: object
      properties:
        newExternalCareers:
          type: array
          items:
            $ref: "#/components/schemas/ExternalCareerRequest"
    Category:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        categoryId:
          type: integer
          format: int64
        categoryName:
          type: string
    ExternalCareerResponse:
      type: object
      properties:
        externalCareerId:
          type: integer
          format: int64
        category:
          $ref: "#/components/schemas/Category"
        workCount:
          type: integer
          format: int32
    OfferEmploymentRequest:
      type: object
      properties:
        employeeId:
          type: integer
          format: int64
        businessId:
          type: integer
          format: int64
        suggestHourlyPay:
          type: integer
          format: int32
        suggestStartTime:
          type: string
          format: date-time
        suggestEndTime:
          type: string
          format: date-time
    OfferEmploymentResponse:
      type: object
      properties:
        suggestId:
          type: integer
          format: int64
        success:
          type: boolean
        message:
          type: string
    OfferEmploymentCompleteRequest:
      required:
      - employeeId
      - suggestId
      type: object
      properties:
        suggestId:
          type: integer
          format: int64
        employeeId:
          type: integer
          format: int64
    Business:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        businessId:
          type: integer
          format: int64
        employer:
          $ref: "#/components/schemas/Account"
        businessCategories:
          type: array
          items:
            $ref: "#/components/schemas/BusinessCategory"
        businessName:
          type: string
        location:
          $ref: "#/components/schemas/BusinessLocation"
        representationName:
          type: string
        openDate:
          type: string
          format: date
        registrationNumber:
          type: string
    BusinessCategory:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        business:
          $ref: "#/components/schemas/Business"
        category:
          $ref: "#/components/schemas/Category"
    Contract:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        contractId:
          type: integer
          format: int64
        offerEmployment:
          $ref: "#/components/schemas/OfferEmployment"
        contractStartTime:
          type: string
          format: date-time
        contractEndTime:
          type: string
          format: date-time
        contractHourlyPay:
          type: integer
          format: int32
        contractSucceeded:
          type: boolean
        validContractRangeTime:
          type: boolean
    OfferEmployment:
      type: object
      properties:
        suggestId:
          type: integer
          format: int64
        business:
          $ref: "#/components/schemas/Business"
        employee:
          $ref: "#/components/schemas/Account"
        contract:
          $ref: "#/components/schemas/Contract"
        suggestStartTime:
          type: string
          format: date-time
        suggestEndTime:
          type: string
          format: date-time
        suggestHourlyPay:
          type: integer
          format: int32
        suggestReaded:
          type: boolean
        suggestSucceeded:
          type: boolean
        suggestRegisterTime:
          type: string
          format: date-time
        suggestFinished:
          type: boolean
    Review:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        reviewId:
          type: integer
          format: int64
        offerEmployment:
          $ref: "#/components/schemas/OfferEmployment"
        writer:
          $ref: "#/components/schemas/Business"
        employee:
          $ref: "#/components/schemas/Account"
        contract:
          $ref: "#/components/schemas/Contract"
        reviewStarPoint:
          type: integer
          format: int32
        reviewContent:
          type: string
    ReviewReportRequest:
      type: object
      properties:
        reason:
          type: string
    ReviewReportResponse:
      type: object
      properties:
        reportId:
          type: integer
          format: int64
        message:
          type: string
    AcceptSuggestCommand:
      required:
      - suggestId
      type: object
      properties:
        suggestId:
          type: integer
          format: int64
    AddReviewRequest:
      required:
      - contractId
      type: object
      properties:
        contractId:
          type: integer
          format: int64
        reviewScore:
          type: integer
          format: int32
        reviewContent:
          type: string
    AddBusinessRequest:
      type: object
      properties:
        requestMemberId:
          type: integer
          format: int64
        businessName:
          type: string
        location:
          $ref: "#/components/schemas/BusinessLocation"
        categoryIds:
          type: array
          items:
            type: integer
            format: int64
        representationName:
          type: string
    RefreshTokenRequest:
      required:
      - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
    LoginRequest:
      required:
      - loginId
      - password
      type: object
      properties:
        loginId:
          type: string
        password:
          type: string
    BusinessNumberRequest:
      required:
      - businessName
      - businessOpenDate
      - businessRegistrationNumber
      - representationName
      type: object
      properties:
        businessRegistrationNumber:
          type: string
        businessName:
          type: string
        representationName:
          type: string
        businessOpenDate:
          type: string
    SignUpEmployerRequest:
      required:
      - businessName
      - businessOpenDate
      - businessRegistrationNumber
      - location
      - loginId
      - nationality
      - password
      - phoneNumber
      - representationName
      - role
      type: object
      properties:
        loginId:
          type: string
        password:
          type: string
        email:
          type: string
        businessRegistrationNumber:
          type: string
        businessName:
          type: string
        representationName:
          type: string
        businessOpenDate:
          type: string
        location:
          $ref: "#/components/schemas/BusinessLocation"
        nationality:
          type: string
          enum:
          - KOREAN
          - FOREIGN
        role:
          type: string
          enum:
          - EMPLOYEE
          - EMPLOYER
        phoneNumber:
          type: string
    SignUpEmployeeRequest:
      required:
      - emailReceivable
      - loginId
      - name
      - nationality
      - nickname
      - password
      - phoneNumber
      - role
      type: object
      properties:
        loginId:
          type: string
        password:
          type: string
        name:
          type: string
        nickname:
          type: string
        email:
          type: string
        nationality:
          type: string
          enum:
          - KOREAN
          - FOREIGN
        role:
          type: string
          enum:
          - EMPLOYEE
          - EMPLOYER
        phoneNumber:
          type: string
        emailReceivable:
          type: boolean
    EmailCodeRequest:
      type: object
      properties:
        email:
          type: string
        code:
          type: string
    EmailRequest:
      type: object
      properties:
        email:
          type: string
    SearchRequest:
      type: object
      properties:
        category:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    SearchResponse:
      type: object
      properties:
        name:
          type: string
        sex:
          type: string
        age:
          type: integer
          format: int32
        starPoint:
          type: number
          format: float
        workCount:
          type: integer
          format: int32
    UserIdRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
    ChatRoom:
      type: object
      properties:
        chatRoomId:
          type: integer
          format: int64
        offerEmployment:
          $ref: "#/components/schemas/OfferEmployment"
        suggestGeneratedDate:
          type: string
          format: date-time
    ChatSummary:
      type: object
      properties:
        roomId:
          type: integer
          format: int64
        lastMessageContent:
          type: string
        lastMessageTime:
          type: string
          format: date-time
        numberOfUnreadMessages:
          type: integer
          format: int64
    ChatSummaryResponse:
      type: object
      properties:
        chatSummaries:
          type: array
          items:
            $ref: "#/components/schemas/ChatSummary"
    Chat:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        roomId:
          type: integer
          format: int64
        senderId:
          type: integer
          format: int64
        receiverId:
          type: integer
          format: int64
        sendTime:
          type: string
          format: date-time
        isRead:
          type: boolean
    ReviewResponse:
      type: object
      properties:
        reviewId:
          type: integer
          format: int64
        businessName:
          type: string
        businessId:
          type: integer
          format: int64
        contractStartTime:
          type: string
          format: date-time
        contractEndTime:
          type: string
          format: date-time
        reviewStarPoint:
          type: integer
          format: int32
        reviewContent:
          type: string
    ReviewAvailableResponse:
      type: object
      properties:
        employeeId:
          type: integer
          format: int64
        employeeName:
          type: string
    WorkHourResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    InternalCareerResponse:
      type: object
      properties:
        contractId:
          type: integer
          format: int64
        businessName:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    SuggestedBusinessResponse:
      type: object
      properties:
        businessId:
          type: integer
          format: int64
        suggestStartDateTime:
          type: string
          format: date-time
        suggestEndDateTime:
          type: string
          format: date-time
        suggestPartTimePayment:
          type: integer
          format: int32
        suggestChecked:
          type: boolean
        suggestAccepted:
          type: boolean
    BusinessInfoDTO:
      type: object
      properties:
        businessName:
          type: string
        representationName:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        location:
          $ref: "#/components/schemas/BusinessLocation"
        businessPhone:
          type: string
        signedDate:
          type: string
          format: date-time
    ContractDTO:
      type: object
      properties:
        businessInfo:
          $ref: "#/components/schemas/BusinessInfoDTO"
        employeeInfo:
          $ref: "#/components/schemas/EmployeeInfoDTO"
    ContractScheduleResponse:
        type: object
        properties:
          contractId:
            type: number
            format: int64
          businessName:
            type: string
          startTime:
            type: string
            format: date-time
          endTime:
            type: string
            format: data-time
    EmployeeInfoDTO:
      type: object
      properties:
        employeeName:
          type: string
        employeePhone:
          type: string
        starPoint:
          type: number
          format: float
        workCount:
          type: integer
          format: int32
    IntroductionRequest:
      type: object
      properties:
        introduction:
          type: string
    AddIntroductionResponse:
      type: object
      properties:
        introduction:
          type: string
    EmailConsentRequest:
      type: object
      properties:
        status:
          type: boolean
          example: true
        memberId:
          type: integer
          format: int64
          example: 123

    EmailConsentResponse:
      type: object
      properties:
        receivable:
          type: boolean
          example: true

  securitySchemes:
    JWT_TOKEN:
      type: http
      scheme: bearer
      bearerFormat: JWT
