openapi: 3.0.1
info:
  title: Spring API
  description: 단팥 백엔드 API 명세서입니다.
  version: 1.0.0
servers:
  - url: http://localhost:8080
security:
  - JWT_TOKEN: []
paths:
  /api/v1/account/validation/business-number:
    post:
      tags:
        - AccountController
      operationId: verifyBusinessNumber
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessNumberRequest"
            example:
              {
                businessRegistrationNumber: "1041736263",
                businessName: "김태영닷컴",
                representationName: "김태영",
                businessOpenDate: "20231123"
              }
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "유효한 사업자 등록 정보입니다."
  /api/v1/account/sign-up/employer:
    post:
      tags:
        - AccountController
      operationId: signUpEmployer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpEmployerRequest"
            example:
              loginId: "로그인 ID를 적어주세요"
              password: "비밀번호를 적어주세요"
              email: "회원가입한 적 없는 이메일을 적어주세요"
              businessRegistrationNumber: "1041736263"
              businessName: "김태영닷컴"
              representationName: "김태영"
              businessOpenDate: "20231123"
              location:
                zipcode: "12093"
                address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
                detailAddress: "101호"
              nationality: "KOREAN"
              role: "EMPLOYER"
              phoneNumber: "010-1234-1234"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "회원가입이 완료되었습니다"
  /api/v1/account/email/code:
    post:
      tags:
        - AccountController
      operationId: sendEmailCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailRequest"
            example:
              email: "본인 이메일 적어서 테스트해주세요"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "이메일 전송을 완료하였습니다."
  /api/v1/account/email/verification:
    post:
      tags:
        - AccountController
      operationId: verifyEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailCodeRequest"
            example:
              email: "테스트한 이메일을 적어주세요"
              code: "받은 코드 번호를 적어주세요"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "유효한 이메일입니다."
  /api/v1/account/sign-up/employee:
    post:
      tags:
        - AccountController
      operationId: signUpEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpEmployeeRequest"
            example:
              "loginId": "로그인 ID를 적어주세요"
              "password": "비밀번호를 적어주세요"
              "name": "이름을 적어주세요"
              "nickname": "닉네임을 적어주세요"
              "email": "회원가입한 적이 없는 이메일을 적어주세요"
              "nationality": "KOREAN"
              "role": "EMPLOYEE"
              "phoneNumber": "010-1234-1234"
              "emailReceivable": true
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "회원가입이 완료되었습니다"
  /api/v1/account/my:
    delete:
      tags:
        - AccountController
      operationId: deleteAccount
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "성공적으로 삭제되었습니다."
  /api/v1/auth/login:
    post:
      tags:
        - AuthController
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              loginId: "로그인 ID를 입력해주세요"
              password: "비밀번호를 입력해주세요"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
              example:
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                userId: "123"
                userRole: "EMPLOYEE"
  /api/v1/auth/refresh:
    post:
      tags:
        - AuthController
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
            example:
              refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
              example:
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                userId: "123"
                userRole: "EMPLOYEE"
  /api/v1/auth/logout:
    post:
      tags:
        - AuthController
      operationId: logout
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
              example:
                accessToken: null
                userId: null
                userRole: null
  /api/v1/possible-board:
    post:
      tags:
        - BoardController
      operationId: changeOpenStatus
      parameters:
        - name: open-status
          in: query
          required: true
          schema:
            type: boolean
          example: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "사용자 정보가 성공적으로 업데이트되었습니다."
  /api/v1/possible-board/work-preferences/districts:
    get:
      tags:
        - BoardController
      operationId: getPreferredDistricts
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlavoredDistrictResponse"
                example:
                  - districtId: 1
                    districtName: "서울 강남구"
                  - districtId: 5
                    districtName: "대구 남구"
    post:
      tags:
        - BoardController
      operationId: updatePreferredDistricts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePreferredDistrictsRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlavoredDistrictResponse"
              example:
                example:
                  - districtId: 1
                    districtName: "서울 강남구"
                  - districtId: 5
                    districtName: "대구 남구"
  /api/v1/possible-board/work-preferences/category:
    get:
      tags:
        - BoardController
      operationId: getPreferredCategories
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlavoredCategoryResponse"
              example:
                - categoryId: 8
                  categoryName: "IT•인터넷"
                - categoryId: 9
                  categoryName: "교육•강사"
    post:
      tags:
        - BoardController
      operationId: updatePreferredCategories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePreferredCategoriesRequest"
            example:
              categoryIds:
                - 8
                - 9
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlavoredCategoryResponse"
              example:
                - categoryId: 8
                  categoryName: "IT•인터넷"
                - categoryId: 9
                  categoryName: "교육•강사"
  /api/v1/possible-board/work-hours:
    get:
      tags:
        - BoardController
      operationId: getWorkHours
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkHourResponse"
              example:
                - id: 101
                  startTime: "2024-02-01T09:00:00"
                  endTime: "2024-02-01T18:00:00"
                - id: 102
                  startTime: "2024-02-02T10:00:00"
                  endTime: "2024-02-02T19:00:00"
    post:
      tags:
        - BoardController
      operationId: updatePossibleTimes
      parameters:
        - name: requestMemberId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPossibleTimeRequest"
            example:
              possibleTimes:
                - startTime: "2025-02-10T09:00:00"
                  endTime: "2025-02-10T18:00:00"
                - startTime: "2025-02-13T10:00:00"
                  endTime: "2025-02-13T19:00:00"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
              example:
                possibleTimes:
                  - startTime: "2025-02-10T09:00:00"
                    endTime: "2025-02-10T18:00:00"
                  - startTime: "2025-02-13T10:00:00"
                    endTime: "2025-02-13T19:00:00"
  /api/v1/possible-board/personal-info:
    get:
      tags:
        - BoardController
      operationId: getPersonalInfo
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PersonalInfoResponse"
              example:
                - name: "김태영"
                  nickname: "김태일"
                  age: 25
                  sex: "남"
                  email: "chulsoo@example.com"
                  phoneNumber: "010-1234-5678"
                  starPoint: 4.5
                  workCount: 100
    post:
      tags:
        - BoardController
      operationId: updatePersonalInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePersonalInfoRequest"
            example:
                name: "김태영"
                nickname: "김태일"
                age: 25
                sex: "남"
                email: "chulsoo@example.com"
                phoneNumber: "010-1234-5678"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PersonalInfoResponse"
              example:
                - name: "김태영"
                  nickname: "김태일"
                  age: 25
                  sex: "남"
                  email: "chulsoo@example.com"
                  phoneNumber: "010-1234-5678"
                  starPoint: 4.5
                  workCount: 100
  /api/v1/possible-board/external-career:
    get:
      tags:
        - BoardController
      operationId: getExternalCareers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExternalCareerResponse"
              example:
                - externalCareerId: 1
                  category:
                    categoryId: 1
                    categoryName: "외식•음료"
                  workCount: 1
                - externalCareerId: 2
                  category:
                    categoryId: 2
                    categoryName: "유통•판매"
                  workCount: 1
    post:
      tags:
        - BoardController
      operationId: updateExternalCareers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateExternalCareerRequest"
            example:
              newExternalCareers:
                - categoryId: 1
                  workCount: 1
                - categoryId: 2
                  workCount: 1
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExternalCareerResponse"
              example:
                - externalCareerId: 1
                  category:
                    categoryId: 1
                    categoryName: "외식•음료"
                  workCount: 1
                - externalCareerId: 2
                  category:
                    categoryId: 2
                    categoryName: "유통•판매"
                  workCount: 1
  /api/v1/possible-board/internal-career:
    get:
      tags:
        - BoardController
      operationId: getInternalCareers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InternalCareerResponse"
              example:
                - contractId: 1
                  businessName: "김태영닷컴"
                  startTime: "2024-02-15 12:00:00"
                  endTime: "2024-02-15 14:00:00"
  /api/v1/upload/profile:
    post:
      tags:
        - S3Controller
      summary: 프로필 이미지 업로드
      description: "사용자가 프로필 이미지를 업로드합니다."
      operationId: upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "업로드할 프로필 이미지 파일을 선택하세요."
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "https://danpat.s3.ap-northeast-2.amazonaws.com/user-uploads/1/profile.png"

  /api/v1/offeremployment:
    post:
      tags:
        - OfferEmploymentController
      operationId: sendOfferEmployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferEmploymentRequest"
            example:
              employeeId: 1001
              businessId: 1
              suggestHourlyPay: 10000
              suggestStartTime: "2025-01-01T09:00:00"
              suggestEndTime: "2025-01-01T18:00:00"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OfferEmploymentResponse"
              example:
                suggestId: 1
                success: false
                message: "Offer pending"
  /api/v1/offeremployment/complete:
    post:
      tags:
        - OfferEmploymentController
      operationId: completeOfferEmployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OfferEmploymentCompleteRequest"
            example:
              suggestId: 1
              employeeId: 1001
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example:
                success: true
                message: "성공적으로 종료되었습니다."
  /api/v1/contracts/suggests/chatroom:
      post:
        tags:
          - SuggestController
        operationId: createChatRoom
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcceptSuggestCommand"
              example:
                suggestId: 1
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  type: string
                example: "성공적으로 채팅방을 생성하였습니다."
  /api/v1/contracts/suggests/{suggestId}/accept:
      post:
        tags:
        - SuggestController
        operationId: acceptContractContact
        parameters:
        - name: suggestId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  type: object
  /api/v1/employment-suggests/status/{businessId}:
      get:
        tags:
        - SuggestController
        operationId: getSuggestStatus
        parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  type: string
                example:
                  - status: "대기 중"
                    name: "알바생"
                    businessName: "김태영닷컴"
                    workTime: "2024.02.20 12:00~14:00"
  /api/v1/contracts/employment-suggests:
      get:
        tags:
        - SuggestController
        operationId: getAllSuggest
        parameters:
        - name: employeeId
          in: query
          required: true
          schema:
            type: integer
            format: int64
        responses:
          "200":
            description: OK
            content:
              '*/*':
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/SuggestedBusinessResponse"
                example:
                  - businessId: 1
                    suggestStartDateTime: "2024-02-01T09:00:00"
                    suggestEndDateTime: "2024-02-01T11:00:00"
                    suggestPartTimePayment: 10000
                    suggestChecked: 1
                    suggestAccepted: 0
                  - businessId: 2
                    suggestStartDateTime: "2024-02-01T09:00:00"
                    suggestEndDateTime: "2024-02-01T11:00:00"
                    suggestPartTimePayment: 10000
                    suggestChecked: 1
                    suggestAccepted: 1
#  /api/v1/support/announcements/{announcementId}:
#    get:
#      tags:
#        - announcement-controller
#      operationId: getAnnouncement
#      parameters:
#        - name: announcementId
#          in: path
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        "200":
#          description: OK
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/AnnouncementResponse"
#              example:
#                announcementId: 1
#                announcementTitle: "긴급 서버 점검 공지"
#                announcementType: "공지"
#                announcementContent: "서버 점검이 오늘 밤 11시에 진행됩니다."
#                viewCount: 123
#
#
#    put:
#      tags:
#      - announcement-controller
#      operationId: updateAnnouncement
#      parameters:
#      - name: announcementId
#        in: path
#        required: true
#        schema:
#          type: integer
#          format: int64
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/AnnouncementRequest"
#            example:
#              announcementTitle: "수정된 공지사항 제목"
#              announcementType: "업데이트"
#              announcementContent: "공지 내용이 업데이트되었습니다."
#        required: true
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                $ref: "#/components/schemas/AnnouncementResponse"
#              example:
#                announcementId: 1
#                announcementTitle: "수정된 공지사항 제목"
#                announcementType: "업데이트"
#                announcementContent: "공지 내용이 업데이트되었습니다."
#                viewCount: 200
#    delete:
#      tags:
#      - announcement-controller
#      operationId: deleteAnnouncement
#      parameters:
#      - name: announcementId
#        in: path
#        required: true
#        schema:
#          type: integer
#          format: int64
#      responses:
#        "200":
#          description: OK
  /api/v1/contracts/{contractId}:
    put:
      tags:
      - ContractController
      operationId: updateContractCondition
      parameters:
      - name: contractId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContractConditionRequest"
            example:
              suggestStartDateTime: "2025-02-01T14:00:00"
              suggestEndDateTime: "2025-02-01T16:00:00"
              suggestHourlyPayment: 10000
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "근무 조건이 변경되었습니다."
  /api/v1/contracts/{contractId}/accepts:
    post:
      tags:
        - ContractController
      operationId: acceptContract
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/contracts/{contractId}/status:
    get:
      tags:
        - ContractController
      operationId: getContractInfo
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ContractDTO"
              example:
                businessInfo:
                  businessName: "김태영닷컴"
                  representationName: "김태영"
                  startTime: "2024-02-01T09:00:00"
                  endTime: "2024-02-01T18:00:00"
                  location:
                    address: "서울시 강남구 테헤란로 123"
                    zipcode: "06100"
                    detailAddress: "5층 503호"
                  businessPhone: "02-1234-5678"
                  signedDate: "2023-12-01T14:30:00"
                employeeInfo:
                  employeeName: "이영희"
                  employeePhone: "010-9876-5432"
                  starPoint: 4.7
                  workCount: 120
  /api/v1/contracts/schedule:
    get:
      tags:
        - ContractController
      operationId: getContractSchedule
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractScheduleResponse"
              example:
                - contractId:
                  businessName:
                  startTime:
                  endTime:
                - contractId:
                  businessName:
                  startTime:
                  endTime:

  /api/v1/business:
    get:
      tags:
      - BusinessController
      operationId: getMyBusiness
      parameters:
      - name: businessId
        in: query
        required: true
        schema:
          type: integer
          format: int64
        example: 1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
              example:
                businessName: "김태영닷컴"
                businessId: 1
                owner:
                  accountId: 1
                  name: "김태영"
                location:
                  zipcode: "12093"
                  address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
                  detailAddress: "101호"
                categoryInfos:
                  - categoryId: 8
                    categoryName: "IT•인터넷"
    put:
      tags:
      - BusinessController
      operationId: modifyMyBusiness
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyBusinessRequest"
            example:
              businessId: 1
              businessName: "김태영닷컴"
              location:
                zipcode: "12093"
                address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
                detailAddress: "101호"
              categoryInfos:
              - 8
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "요청이 성공적으로 처리되었습니다."
    post:
      tags:
      - BusinessController
      operationId: addBusiness
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddBusinessRequest"
            example:
              requestMemberId: 1
              businessName: "김태영닷컴"
              businessRegistrationNumber: "12345"
              businessOpenDate: "250101"
              location:
                zipcode: "12093"
                address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
                detailAddress: "101호"
              categoryIds:
                - 8
              representationName: "김태영"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "요청이 성공적으로 처리되었습니다."
#  /api/v1/support/inquiry:
#    post:
#      tags:
#      - inquiry-controller
#      operationId: createInquiry
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/InquiryRequest"
#            example:
#              inquiryType: "일반"
#              subInquiryType: "서비스 문제"
#              title: "서비스 관련 문제"
#              content: "서비스 기능에 문제가 있습니다."
#        required: true
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                $ref: "#/components/schemas/InquiryResponse"
#              example:
#                inquiry_id: "123"
#                message: "문의가 성공적으로 접수되었습니다."
#
#  /api/v1/support/announcements:
#    get:
#      tags:
#      - announcement-controller
#      operationId: getAnnouncements
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/AnnouncementResponse"
#                example:
#                  - announcementId: 1
#                    announcementTitle: "긴급 서버 점검 공지"
#                    announcementType: "공지"
#                    announcementContent: "서버 점검이 오늘 밤 11시에 진행됩니다."
#                    viewCount: 123
#                  - announcementId: 2
#                    announcementTitle: "새로운 기능 업데이트"
#                    announcementType: "업데이트"
#                    announcementContent: "신규 기능이 추가되었습니다. 확인해보세요!"
#                    viewCount: 89
#    post:
#      tags:
#      - announcement-controller
#      operationId: createAnnouncement
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/AnnouncementRequest"
#            example:
#              announcementTitle: "시스템 점검 안내"
#              announcementType: "공지"
#              announcementContent: "시스템 점검이 오전 12시부터 오전 4시까지 진행됩니다."
#        required: true
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                $ref: "#/components/schemas/AnnouncementResponse"
#              example:
#                announcementId: 1
#                announcementTitle: "시스템 점검 안내"
#                announcementType: "공지"
#                announcementContent: "시스템 점검이 오전 12시부터 오전 4시까지 진행됩니다."
#                viewCount: 0
  /api/v1/info/my/reviews/{reviewId}/report:
    post:
      tags:
      - ReviewReportController
      operationId: reportReview
      parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Review"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewReportRequest"
            example:
              reason: "부당하거나 허위 내용이 포함되어 있습니다."
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReviewReportResponse"
              example:
                reportId: 789
                message: "리뷰 신고가 성공적으로 접수되었습니다."
  /api/v1/contracts/review:
    post:
      tags:
      - ContractReviewController
      operationId: addReview
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddReviewRequest"
            example:
              contractId: 9
              reviewScore: 5
              reviewContent: "일 잘하네요"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
              example: "리뷰가 성공적으로 작성되었습니다."
  /api/v1/contracts/review/my:
    get:
      tags:
        - ContractReviewController
      operationId: getMyReview
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewResponse"
              example:
                - reviewId: 1
                  contractId: 9
                  reviewContent: "일 잘하네요"
                  reviewScore: 5
  #  /api/search/search:
#    post:
#      tags:
#      - search-controller
#      operationId: searchAccounts
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/SearchRequest"
#            example:
#              category: "IT"
#              startTime: "2025-01-01T09:00:00"
#              endTime: "2025-01-01T18:00:00"
#        required: true
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/SearchResponse"
#                example:
#                  - name: "John Doe"
#                    sex: "Male"
#                    age: 30
#                    starPoint: 4.5
#                    workCount: 50
#                  - name: "Jane Smith"
#                    sex: "Female"
#                    age: 28
#                    starPoint: 4.8
#                    workCount: 60
#  /favorites/employees:
#    get:
#      tags:
#      - EmployerController
#      operationId: getLikeEmployee
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: string
#              example:
#                - employeeId: 101
#                  name: "김태영"
#                  nickname: "김태영1"
#                  sex: "남"
#                  age: 30
#                  starPoint: 4.7
#                  workCount: 120
#                  externalCareerList:
#                    - externalCareerId: 1
#                      category:
#                        - categoryId: 1
#                          categoryName: "외식•음료"
#                      workCount: 1
#                    - externalCareerId: 2
#                      category:
#                        - categoryId: 2
#                          categoryName: "유통•판매"
#                      workCount: 1
#                  flavoredCategoryList:
#                    - categoryId: 1
#                      categoryName: "외식•음료"
#                    - categoryId: 2
#                      categoryName: "유통•판매"
  /chat/summaries:
    get:
      tags:
      - chat-controller
      operationId: getChatSummaries
      parameters:
      - name: userIdRequest
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/UserIdRequest"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChatSummaryResponse"
              example:
                chatSummaries:
                  - roomId: 1
                    lastMessageContent: "안녕하세요!"
                    lastMessageTime: "2025-02-01T15:51:55.626Z"
                    numberOfUnreadMessages: 2
                  - roomId: 2
                    lastMessageContent: "알바 하실래요?"
                    lastMessageTime: "2025-02-01T15:51:55.626Z"
                    numberOfUnreadMessages: 2
  /chat/room/{roomId}/chats:
    get:
      tags:
      - chat-controller
      operationId: getMessages
      parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 1
      - name: lastChatId
        in: query
        required: false
        schema:
          type: string
        example: "1"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chat"
              example:
                - id: "msg-12345"
                  content: "안녕하세요!"
                  roomId: 0
                  senderId: 1
                  receiverId: 2
                  sendTime: "2025-02-01T15:56:28.378Z"
                  isRead: true
                - id: "msg-67890"
                  content: "네, 반갑습니다!"
                  roomId: 0
                  senderId: 2
                  receiverId: 1
                  sendTime: "2025-02-01T15:57:00.123Z"
                  isRead: false
#  /businesses:
#    get:
#      tags:
#      - EmployerController
#      operationId: getBusinessList
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: object
#              example:
#                - businessName: "김태영닷컴"
#                  businessLocation:
#                    zipcode: "12093"
#                    address: "경기도 남양주시 송산로339번길 25, 3층(별내동)"
#                    detailAddress: "101호"
#                - businessName: "김태영법조타운"
#                  businessLocation:
#                    zipcode: "404320"
#                    address: "인천광역시 서구 원당동 인천검단택지개발지구 C5-1-1BL"
#                    detailAddress: "101호"
#  /api/v1/support/my-inquiries:
#    get:
#      tags:
#      - inquiry-controller
#      operationId: getMyInquiries
#      parameters:
#      - name: accountId
#        in: query
#        required: true
#        schema:
#          type: integer
#          format: int64
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/InquiryResponse"
#                example:
#                  - inquiryId: 1
#                    inquiryType: "일반"
#                    subInquiryType: "서비스 문제"
#                    title: "서비스 관련 문제"
#                    content: "서비스 기능에 문제가 발생했습니다."
#                    inquiryStatus: "대기 중"
#                    answerDate: null
#                    createdBy: 123
#                  - inquiryId: 2
#                    inquiryType: "기술"
#                    subInquiryType: "버그 신고"
#                    title: "애플리케이션 버그 신고"
#                    content: "애플리케이션에서 치명적인 버그를 발견했습니다."
#                    inquiryStatus: "답변 완료"
#                    answerDate: "2025-01-20T10:00:00"
#                    createdBy: 123
#  /api/v1/support/announcements/search:
#    get:
#      tags:
#      - announcement-controller
#      operationId: searchAnnouncements
#      parameters:
#      - name: keyword
#        in: query
#        required: true
#        schema:
#          type: string
#          example: "점검"
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/AnnouncementResponse"
#                example:
#                  - announcementId: 1
#                    announcementTitle: "시스템 점검 안내"
#                    announcementType: "공지"
#                    announcementContent: "시스템이 오전 12시부터 오전 4시까지 점검을 진행합니다."
#                    viewCount: 150
#  /api/v1/review:
#    get:
#      tags:
#      - review-controller
#      operationId: getAllReviews
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/ReviewResponse"
#                example:
#                  - reviewId: 1
#                    businessName: "테스트 사업장"
#                    businessId: 10
#                    contractStartTime: "2025-01-01T09:00:00"
#                    contractEndTime: "2025-01-01T18:00:00"
#                    reviewStarPoint: 5
#                    reviewContent: "훌륭한 작업이었습니다!"
#                  - reviewId: 2
#                    businessName: "또 다른 사업장"
#                    businessId: 20
#                    contractStartTime: "2025-01-02T09:00:00"
#                    contractEndTime: "2025-01-02T18:00:00"
#                    reviewStarPoint: 4
#                    reviewContent: "좋은 성과를 보여주었습니다."
#  /api/v1/review/{reviewId}:
#    get:
#      tags:
#      - review-controller
#      operationId: getReviewsByEmployee
#      parameters: []
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/ReviewResponse"
#                example:
#                  - reviewId: 1
#                    businessName: "테스트 사업장"
#                    businessId: 10
#                    contractStartTime: "2025-01-01T09:00:00"
#                    contractEndTime: "2025-01-01T18:00:00"
#                    reviewStarPoint: 5
#                    reviewContent: "훌륭한 작업이었습니다!"
#  /api/v1/review/my/reviews:
#    get:
#      tags:
#      - review-controller
#      operationId: getMyReviews
#      parameters:
#      - name: accountId
#        in: query
#        required: true
#        schema:
#          type: integer
#          format: int64
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/ReviewResponse"
#                example:
#                  - reviewId: 1
#                    businessName: "테스트 사업장"
#                    businessId: 10
#                    contractStartTime: "2025-01-01T09:00:00"
#                    contractEndTime: "2025-01-01T18:00:00"
#                    reviewStarPoint: 5
#                    reviewContent: "훌륭한 작업이었습니다!"
#                  - reviewId: 2
#                    businessName: "스타트업 컴퍼니"
#                    businessId: 20
#                    contractStartTime: "2025-01-05T10:00:00"
#                    contractEndTime: "2025-01-05T19:00:00"
#                    reviewStarPoint: 4
#                    reviewContent: "업무 진행이 원활했습니다."
#  /api/v1/review/available:
#    get:
#      tags:
#      - review-controller
#      operationId: getAvailableReviewTargets
#      parameters:
#      - name: businessId
#        in: query
#        required: true
#        schema:
#          type: integer
#          format: int64
#      responses:
#        "200":
#          description: OK
#          content:
#            '*/*':
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/ReviewAvailableResponse"
#                example:
#                  - employeeId: 1001
#                    employeeName: "김철수"
#                  - employeeId: 1002
#                    employeeName: "이영희"
components:
  schemas:
    AnnouncementRequest:
      type: object
      properties:
        announcementTitle:
          type: string
        announcementType:
          type: string
        announcementContent:
          type: string
    AnnouncementResponse:
      type: object
      properties:
        announcementId:
          type: integer
          format: int64
        announcementTitle:
          type: string
        announcementType:
          type: string
        announcementContent:
          type: string
        viewCount:
          type: integer
          format: int32

    UpdateContractConditionRequest:
      type: object
      properties:
        suggestStartDateTime:
          type: string
          format: date-time
        suggestEndDateTime:
          type: string
          format: date-time
        suggestHourlyPayment:
          type: integer
          format: int32
    BusinessLocation:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        zipcode:
          type: string
        address:
          type: string
        detailAddress:
          type: string
    ModifyBusinessRequest:
      required:
      - businessId
      type: object
      properties:
        businessId:
          type: integer
          format: int64
        businessName:
          type: string
        location:
          $ref: "#/components/schemas/BusinessLocation"
        representationName:
          type: string
        categoryId:
          type: array
          items:
            type: integer
            format: int64
    Account:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        accountId:
          type: integer
          format: int64
        loginId:
          type: string
        password:
          type: string
        name:
          type: string
        nickname:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        nationality:
          type: string
          enum:
          - KOREAN
          - FOREIGN
        roles:
          type: array
          items:
            type: string
            enum:
            - EMPLOYEE
            - EMPLOYER
        sex:
          type: string
        age:
          type: integer
          format: int32
        profileImage:
          type: string
        starPoint:
          type: number
          format: float
        workCount:
          type: integer
          format: int32
        openStatus:
          type: boolean
        deleted:
          type: boolean
        emailReceivable:
          type: boolean
        loginUser:
          $ref: "#/components/schemas/LoginUserRequest"
    InquiryRequest:
      required:
      - createdBy
      - inquiryType
      type: object
      properties:
        inquiryType:
          type: string
        subInquiryType:
          type: string
        title:
          type: string
        content:
          type: string
        createdBy:
          $ref: "#/components/schemas/Account"
    LoginUserRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
    InquiryResponse:
      required:
      - createdBy
      - inquiryId
      type: object
      properties:
        inquiryId:
          type: integer
          format: int64
        inquiryType:
          type: string
        subInquiryType:
          type: string
        title:
          type: string
        content:
          type: string
        inquiryStatus:
          type: string
        answerDate:
          type: string
          format: date-time
        createdBy:
          $ref: "#/components/schemas/Account"
    UpdatePreferredDistrictsRequest:
      type: object
      properties:
        districtIds:
          type: array
          items:
            type: integer
            format: int64
    FlavoredDistrictResponse:
      type: object
      properties:
        districtId:
          type: integer
          format: int64
        districtName:
          type: string
    UpdatePreferredCategoriesRequest:
      type: object
      properties:
        categoryIds:
          type: array
          items:
            type: integer
            format: int64
    FlavoredCategoryResponse:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
        categoryName:
          type: string
    AddPossibleTimeRequest:
      type: object
      properties:
        possibleTimes:
          type: array
          items:
            $ref: "#/components/schemas/PossibleTimeForm"
    PossibleTimeForm:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    UpdatePersonalInfoRequest:
      type: object
      properties:
        name:
          type: string
        sex:
          type: string
        age:
          type: integer
          format: int32
        phoneNumber:
          type: string
        email:
          type: string
        nickname:
          type: string
    PersonalInfoResponse:
      type: object
      properties:
        name:
          type: string
        nickname:
          type: string
        age:
          type: integer
          format: int32
        sex:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        starPoint:
          type: number
          format: float
        workCount:
          type: integer
          format: int32
    ExternalCareerRequest:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
        workCount:
          type: integer
          format: int32
    UpdateExternalCareerRequest:
      type: object
      properties:
        newExternalCareers:
          type: array
          items:
            $ref: "#/components/schemas/ExternalCareerRequest"
    Category:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        categoryId:
          type: integer
          format: int64
        categoryName:
          type: string
    ExternalCareerResponse:
      type: object
      properties:
        externalCareerId:
          type: integer
          format: int64
        category:
          $ref: "#/components/schemas/Category"
        workCount:
          type: integer
          format: int32
    OfferEmploymentRequest:
      type: object
      properties:
        employeeId:
          type: integer
          format: int64
        businessId:
          type: integer
          format: int64
        suggestHourlyPay:
          type: integer
          format: int32
        suggestStartTime:
          type: string
          format: date-time
        suggestEndTime:
          type: string
          format: date-time
    OfferEmploymentResponse:
      type: object
      properties:
        suggestId:
          type: integer
          format: int64
        success:
          type: boolean
        message:
          type: string
    OfferEmploymentCompleteRequest:
      required:
      - employeeId
      - suggestId
      type: object
      properties:
        suggestId:
          type: integer
          format: int64
        employeeId:
          type: integer
          format: int64
    Business:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        businessId:
          type: integer
          format: int64
        employer:
          $ref: "#/components/schemas/Account"
        businessCategories:
          type: array
          items:
            $ref: "#/components/schemas/BusinessCategory"
        businessName:
          type: string
        location:
          $ref: "#/components/schemas/BusinessLocation"
        representationName:
          type: string
        openDate:
          type: string
          format: date
        registrationNumber:
          type: string
    BusinessCategory:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        business:
          $ref: "#/components/schemas/Business"
        category:
          $ref: "#/components/schemas/Category"
    Contract:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        contractId:
          type: integer
          format: int64
        offerEmployment:
          $ref: "#/components/schemas/OfferEmployment"
        contractStartTime:
          type: string
          format: date-time
        contractEndTime:
          type: string
          format: date-time
        contractHourlyPay:
          type: integer
          format: int32
        contractSucceeded:
          type: boolean
        validContractRangeTime:
          type: boolean
    OfferEmployment:
      type: object
      properties:
        suggestId:
          type: integer
          format: int64
        business:
          $ref: "#/components/schemas/Business"
        employee:
          $ref: "#/components/schemas/Account"
        contract:
          $ref: "#/components/schemas/Contract"
        suggestStartTime:
          type: string
          format: date-time
        suggestEndTime:
          type: string
          format: date-time
        suggestHourlyPay:
          type: integer
          format: int32
        suggestReaded:
          type: boolean
        suggestSucceeded:
          type: boolean
        suggestRegisterTime:
          type: string
          format: date-time
        suggestFinished:
          type: boolean
    Review:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        reviewId:
          type: integer
          format: int64
        offerEmployment:
          $ref: "#/components/schemas/OfferEmployment"
        writer:
          $ref: "#/components/schemas/Business"
        employee:
          $ref: "#/components/schemas/Account"
        contract:
          $ref: "#/components/schemas/Contract"
        reviewStarPoint:
          type: integer
          format: int32
        reviewContent:
          type: string
    ReviewReportRequest:
      type: object
      properties:
        reason:
          type: string
    ReviewReportResponse:
      type: object
      properties:
        reportId:
          type: integer
          format: int64
        message:
          type: string
    AcceptSuggestCommand:
      required:
      - suggestId
      type: object
      properties:
        suggestId:
          type: integer
          format: int64
    AddReviewRequest:
      required:
      - contractId
      type: object
      properties:
        contractId:
          type: integer
          format: int64
        reviewScore:
          type: integer
          format: int32
        reviewContent:
          type: string
    AddBusinessRequest:
      type: object
      properties:
        requestMemberId:
          type: integer
          format: int64
        businessName:
          type: string
        location:
          $ref: "#/components/schemas/BusinessLocation"
        categoryIds:
          type: array
          items:
            type: integer
            format: int64
        representationName:
          type: string
    RefreshTokenRequest:
      required:
      - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
    LoginRequest:
      required:
      - loginId
      - password
      type: object
      properties:
        loginId:
          type: string
        password:
          type: string
    BusinessNumberRequest:
      required:
      - businessName
      - businessOpenDate
      - businessRegistrationNumber
      - representationName
      type: object
      properties:
        businessRegistrationNumber:
          type: string
        businessName:
          type: string
        representationName:
          type: string
        businessOpenDate:
          type: string
    SignUpEmployerRequest:
      required:
      - businessName
      - businessOpenDate
      - businessRegistrationNumber
      - location
      - loginId
      - nationality
      - password
      - phoneNumber
      - representationName
      - role
      type: object
      properties:
        loginId:
          type: string
        password:
          type: string
        email:
          type: string
        businessRegistrationNumber:
          type: string
        businessName:
          type: string
        representationName:
          type: string
        businessOpenDate:
          type: string
        location:
          $ref: "#/components/schemas/BusinessLocation"
        nationality:
          type: string
          enum:
          - KOREAN
          - FOREIGN
        role:
          type: string
          enum:
          - EMPLOYEE
          - EMPLOYER
        phoneNumber:
          type: string
    SignUpEmployeeRequest:
      required:
      - emailReceivable
      - loginId
      - name
      - nationality
      - nickname
      - password
      - phoneNumber
      - role
      type: object
      properties:
        loginId:
          type: string
        password:
          type: string
        name:
          type: string
        nickname:
          type: string
        email:
          type: string
        nationality:
          type: string
          enum:
          - KOREAN
          - FOREIGN
        role:
          type: string
          enum:
          - EMPLOYEE
          - EMPLOYER
        phoneNumber:
          type: string
        emailReceivable:
          type: boolean
    EmailCodeRequest:
      type: object
      properties:
        email:
          type: string
        code:
          type: string
    EmailRequest:
      type: object
      properties:
        email:
          type: string
    SearchRequest:
      type: object
      properties:
        category:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    SearchResponse:
      type: object
      properties:
        name:
          type: string
        sex:
          type: string
        age:
          type: integer
          format: int32
        starPoint:
          type: number
          format: float
        workCount:
          type: integer
          format: int32
    UserIdRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
    ChatRoom:
      type: object
      properties:
        chatRoomId:
          type: integer
          format: int64
        offerEmployment:
          $ref: "#/components/schemas/OfferEmployment"
        suggestGeneratedDate:
          type: string
          format: date-time
    ChatSummary:
      type: object
      properties:
        roomId:
          type: integer
          format: int64
        lastMessageContent:
          type: string
        lastMessageTime:
          type: string
          format: date-time
        numberOfUnreadMessages:
          type: integer
          format: int64
    ChatSummaryResponse:
      type: object
      properties:
        chatSummaries:
          type: array
          items:
            $ref: "#/components/schemas/ChatSummary"
    Chat:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        roomId:
          type: integer
          format: int64
        senderId:
          type: integer
          format: int64
        receiverId:
          type: integer
          format: int64
        sendTime:
          type: string
          format: date-time
        isRead:
          type: boolean
    ReviewResponse:
      type: object
      properties:
        reviewId:
          type: integer
          format: int64
        businessName:
          type: string
        businessId:
          type: integer
          format: int64
        contractStartTime:
          type: string
          format: date-time
        contractEndTime:
          type: string
          format: date-time
        reviewStarPoint:
          type: integer
          format: int32
        reviewContent:
          type: string
    ReviewAvailableResponse:
      type: object
      properties:
        employeeId:
          type: integer
          format: int64
        employeeName:
          type: string
    WorkHourResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    InternalCareerResponse:
      type: object
      properties:
        contractId:
          type: integer
          format: int64
        businessName:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    SuggestedBusinessResponse:
      type: object
      properties:
        businessId:
          type: integer
          format: int64
        suggestStartDateTime:
          type: string
          format: date-time
        suggestEndDateTime:
          type: string
          format: date-time
        suggestPartTimePayment:
          type: integer
          format: int32
        suggestChecked:
          type: boolean
        suggestAccepted:
          type: boolean
    BusinessInfoDTO:
      type: object
      properties:
        businessName:
          type: string
        representationName:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        location:
          $ref: "#/components/schemas/BusinessLocation"
        businessPhone:
          type: string
        signedDate:
          type: string
          format: date-time
    ContractDTO:
      type: object
      properties:
        businessInfo:
          $ref: "#/components/schemas/BusinessInfoDTO"
        employeeInfo:
          $ref: "#/components/schemas/EmployeeInfoDTO"
    ContractScheduleResponse:
        type: object
        properties:
          contractId:
            type: number
            format: int64
          businessName:
            type: string
          startTime:
            type: string
            format: date-time
          endTime:
            type: string
            format: data-time
    EmployeeInfoDTO:
      type: object
      properties:
        employeeName:
          type: string
        employeePhone:
          type: string
        starPoint:
          type: number
          format: float
        workCount:
          type: integer
          format: int32
  securitySchemes:
    JWT_TOKEN:
      type: http
      scheme: bearer
      bearerFormat: JWT
